// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source api.go -destination mocks/mocks.go -typed true service
//

// Package mock_shortener is a generated GoMock package.
package mock_shortener

import (
	context "context"
	reflect "reflect"

	model "github.ru/noskov-sergey/go-shortener-tpl/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockservice) Create(arg0 model.Shortener) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockserviceMockRecorder) Create(arg0 any) *MockserviceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockservice)(nil).Create), arg0)
	return &MockserviceCreateCall{Call: call}
}

// MockserviceCreateCall wrap *gomock.Call
type MockserviceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockserviceCreateCall) Return(arg0 string, arg1 error) *MockserviceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockserviceCreateCall) Do(f func(model.Shortener) (string, error)) *MockserviceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockserviceCreateCall) DoAndReturn(f func(model.Shortener) (string, error)) *MockserviceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateBatch mocks base method.
func (m *Mockservice) CreateBatch(arg0 []model.Batch) ([]model.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0)
	ret0, _ := ret[0].([]model.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockserviceMockRecorder) CreateBatch(arg0 any) *MockserviceCreateBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*Mockservice)(nil).CreateBatch), arg0)
	return &MockserviceCreateBatchCall{Call: call}
}

// MockserviceCreateBatchCall wrap *gomock.Call
type MockserviceCreateBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockserviceCreateBatchCall) Return(arg0 []model.Batch, arg1 error) *MockserviceCreateBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockserviceCreateBatchCall) Do(f func([]model.Batch) ([]model.Batch, error)) *MockserviceCreateBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockserviceCreateBatchCall) DoAndReturn(f func([]model.Batch) ([]model.Batch, error)) *MockserviceCreateBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *Mockservice) Delete(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockserviceMockRecorder) Delete(arg0, arg1, arg2 any) *MockserviceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockservice)(nil).Delete), arg0, arg1, arg2)
	return &MockserviceDeleteCall{Call: call}
}

// MockserviceDeleteCall wrap *gomock.Call
type MockserviceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockserviceDeleteCall) Return(arg0 error) *MockserviceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockserviceDeleteCall) Do(f func(context.Context, string, []string) error) *MockserviceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockserviceDeleteCall) DoAndReturn(f func(context.Context, string, []string) error) *MockserviceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *Mockservice) GetByID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockserviceMockRecorder) GetByID(arg0 any) *MockserviceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*Mockservice)(nil).GetByID), arg0)
	return &MockserviceGetByIDCall{Call: call}
}

// MockserviceGetByIDCall wrap *gomock.Call
type MockserviceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockserviceGetByIDCall) Return(arg0 string, arg1 error) *MockserviceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockserviceGetByIDCall) Do(f func(string) (string, error)) *MockserviceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockserviceGetByIDCall) DoAndReturn(f func(string) (string, error)) *MockserviceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByUsername mocks base method.
func (m *Mockservice) GetByUsername(arg0 string) ([]model.Shortener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", arg0)
	ret0, _ := ret[0].([]model.Shortener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockserviceMockRecorder) GetByUsername(arg0 any) *MockserviceGetByUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*Mockservice)(nil).GetByUsername), arg0)
	return &MockserviceGetByUsernameCall{Call: call}
}

// MockserviceGetByUsernameCall wrap *gomock.Call
type MockserviceGetByUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockserviceGetByUsernameCall) Return(arg0 []model.Shortener, arg1 error) *MockserviceGetByUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockserviceGetByUsernameCall) Do(f func(string) ([]model.Shortener, error)) *MockserviceGetByUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockserviceGetByUsernameCall) DoAndReturn(f func(string) ([]model.Shortener, error)) *MockserviceGetByUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *Mockservice) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockserviceMockRecorder) Ping() *MockservicePingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Mockservice)(nil).Ping))
	return &MockservicePingCall{Call: call}
}

// MockservicePingCall wrap *gomock.Call
type MockservicePingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockservicePingCall) Return(arg0 error) *MockservicePingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockservicePingCall) Do(f func() error) *MockservicePingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockservicePingCall) DoAndReturn(f func() error) *MockservicePingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
